function gallery(wrapper) {
	
	console.log("gallery.js: Called.");
	
	$(wrapper + " #warning").html("");
	$(wrapper + " #error").html("");

	//$(window).unbind('hashchange');
	$(window).hashchange(function() {
		console.log('gallery.js: Hash has changed to ' + location.hash);
		gallery(wrapper);
	});

	$(wrapper + " #fullframe").html('');
	$(wrapper).attr('nowvisible', '').attr('lastvisible', '').attr('totalvisible', '').attr('totalingallery', '');
	$(wrapper + " #stats").html('').css('width','').css('height','');
	$(wrapper + " #error").html('');
	$(wrapper + " #connectionerror").html('');
	$(wrapper + " #catalogxml").html('');

	var GALLERIES = cataloginfo();

	if (GALLERIES === "") {
		console.log("gallery.js: Call to cataloginfo() failed.");
		$(wrapper + " #workingfullframe").hide();
		return;
	}
	if (location.hash != "") {
		var hash = location.hash;
		console.log("gallery.js: Hash is not empty.  Updating catalog if hash was URL.")
		var galleryid = hash.replace(/^#/,'').replace(/^\//,"");
		cataloginfo(galleryid); // Updates catalog to include one auto-generated by URL.
		GALLERIES = cataloginfo();
	} else {
		var galleryid = GALLERIES["Values"][0]["Id"];
	}
	
	VIVIZ[galleryid] = {};
	
	$(wrapper + " #dropdownswrapper").empty();
	dropdown("gallery", GALLERIES, wrapper + " #dropdownswrapper");
	$(wrapper + " #gallery option[value='" + galleryid + "']").attr('selected','selected');
	
	$(wrapper + ' #dropdownswrapper #gallery').unbind('change');
	$(wrapper + ' #dropdownswrapper #gallery').change(function (){
		console.log('gallery.js: Gallery changed.  galleryid = ' + galleryid);
		var galleryid = $(wrapper + " #gallery option:selected").val();
		$(wrapper + " #error").html("");
		console.log("gallery.js: Setting hash.")
		location.hash = "/" + galleryid;
	});

	var HEADER = cataloginfo(galleryid);
	$("head title").html(HEADER["title"]);
	$(wrapper + " #about").attr('title',HEADER["about"]);

	if ((HEADER["aboutlink"]) && (!HEADER["about"])) {
		$(wrapper + " #about").attr("onclick","window.location='" + HEADER["Aboutlink"]+"'");
	}	
	if ((!HEADER["aboutlink"]) && (HEADER["about"])) {
		//$(wrapper + " #about").attr("onclick","window.location='" + HEADER["Fulldir"]+"'");
		$(wrapper + " #about").show();
		if (HEADER["about"].match(/^http/)) {
			//$(wrapper + " #about").html('<a style="color:white"	>About this gallery</a>');
			$(wrapper + " #about").attr('onclick',"window.location='" + HEADER["about"] + "'");
		} else {
			$(wrapper + " #about").attr('title',HEADER["about"]);
		}
	}

	if (!VIVIZ["showFileName"]) $(wrapper + " #filename").hide();

	$(wrapper + ' #catalogxmlopen').show();
	$(wrapper + ' #catalogxmlclose').hide();
	$(wrapper + " #catalogxmlopen").unbind('click');
	$(wrapper + " #catalogxmlopen").click(
			function () {
				CodeMirror($(wrapper+' #catalogxml')[0], {lineNumbers:true,"mode":"xml", "value":HEADER["xml"]});
				$(wrapper + ' #catalogxmlopen').hide();
				$(wrapper + ' #catalogxmlclose').show();
			});
	$(wrapper + " #catalogxmlclose").unbind('click');
	$(wrapper + " #catalogxmlclose").click(
			function () {
				$(wrapper + " #catalogxml").html('');
				$(wrapper + ' #catalogxmlopen').show();
				$(wrapper + ' #catalogxmlclose').hide();
			}
		);

	if (!VIVIZ["showCatalog"]) $(wrapper + " #catalog").hide();
	if (!VIVIZ["showControls"]) $(wrapper + " #controls").hide()
	if (!VIVIZ["showAttributes"]) $(wrapper + " #attributes").hide()
	if (!VIVIZ["showDropdowns"]) $(wrapper + " #dropdowns").hide()

	var GALLERYINFO = galleryinfo(galleryid);

	if (typeof(GALLERYINFO) === "boolean") {
		$(wrapper + ' #workingfullframe').css('visibility','hidden');
		$(wrapper + ' #catalogxmlopen').click();
		return;
	}

	var tmp = setdropdowns(); // Has a return variable so that it blocks (needed?).
	setthumbs();
	
	// To fix problem in Chrome where onload event is not triggered for cached images.
	//$(wrapper + ' #gallerythumbframe').css('overflow-y','hidden');
	//setTimeout(function() {$(wrapper + ' #gallerythumbframe').css('overflow-y','auto');},200);

	function warning (msg,clear,totime) {

		if (clear) {
			$(wrapper + ' #warning').html(msg);
		} else {
			spacer="";
			if ($(wrapper + ' #warning').text().length > 0) {
				spacer=" | ";
			};
			$(wrapper + ' #warning').append(spacer + msg);
		}

		setTimeout(function () {$(wrapper + ' #warning').html('')},totime || 3000);

	}

	function setthumbs() {
	
		console.log('gallery.setthumbs(): Setting thumbs.');
		
		INFOjs = thumblist(wrapper);

		// Set attributes used by lazy loader
		$(wrapper).attr('totalvisible', INFOjs.length);
		$(wrapper).attr('totalingallery',GALLERYINFO["totalingallery"]);

		var thumbframe = $(wrapper + ' #gallerythumbframe');

		$(wrapper + " #fullframe").html('')
		thumbframe.html(''); // Clear thumbframe
		
		// Clear any previous scroll binding.  (Lazy load uses this.)
		thumbframe.unbind('scroll');

		$(wrapper + ' #stats').html('');
		if (INFOjs.length == 0) {
			$(wrapper + ' #stats').html('No images in subset.');
			return;
		}
		
		s = setthumb(INFOjs,0,true);
	}
	
	function setthumb(INFOjs,i,allbad) {

		if (i == 0) firstimage(i); 

		// Detect bad images:
		// https://github.com/desandro/imagesloaded
		// http://stackoverflow.com/questions/821516/browser-independent-way-to-detect-when-image-has-been-loaded
		// http://stackoverflow.com/questions/3877027/jquery-callback-on-image-load-even-when-the-image-is-cached

		var firstclicked = false;
		function firstimage(f) {

			console.log("gallery.firstimage(): Called.");
			if (f == 0) setcontrolbindings();
			
			$('<img class="gallerythumbbrowse firstimage"/>')
				.appendTo($(wrapper + ' #gallerythumbframe'))
				.attr("id",f+1)
				.error(function () {
					// First image is bad.
					console.log("gallery.firstimage(): Image " + f + " is bad.");
					//warning("Image " + f + " not found.",true);
					$(this).remove();
					if (f == INFOjs.length-1) {
						warning("No images in this subset could be loaded.",true);
						$(wrapper + " #workingfullframe").css('visibility','hidden');
					}
					//findfirstimage(f+1,allbad);
					firstimage(f+1,allbad);
				})
				//.bind('click',setthumbbindings)
				.attr("src", INFOjs[f].ThumbFile)
				.load(function () {
					
					if (f > 0) {
						if (f == 1) {
							warning("The first image in this subset could not be loaded.");
						} else {
							warning("The first " + f + " image" + pl + " in this subset could not be loaded.");
						}
					}
					
					// Trigger load of the first image.
					if (!firstclicked) {
						console.log("gallery.firstimage(): Clicking first image.");
						$(wrapper).attr('nowvisible',f+1)
						$(this).bind('click',setthumbbindings).click();
					}
					firstclicked = true;

					// Scroll to top.
					$(wrapper + " #gallerythumbframe").scrollTo(0);

					// Set title attribute on thumbnail
					$(this).attr("title",imgtitle(INFOjs[f]));

					el = this;
					type = 'thumb'
					var ar = el.naturalWidth/el.naturalHeight;

					if (!VIVIZ[type+"Width"] && !VIVIZ[type+"Height"]) {
						VIVIZ[type+"Width"] = 1.0;
						VIVIZ[type+"Height"] = 1.0;
						if ((GALLERYINFO["fulldir"] === GALLERYINFO["thumbdir"]) || (GALLERYINFO["thumbdir"] === "")) {
							VIVIZ[type+"Width"] = 0.25;
							VIVIZ[type+"Height"] = 0.25;
						}
					}

					// Compute pixels if given fractions.
					if (VIVIZ[type+"Width"]) {
						if (VIVIZ[type+"Width"] > 1.0) {
							VIVIZ[galleryid][type+"Width"] = VIVIZ[type+"Width"];
						} else {
							VIVIZ[galleryid][type+"Width"] = el.naturalWidth*VIVIZ[type+"Width"];
						}
					}
					if (VIVIZ[type+"Height"]) {
						if (VIVIZ[type+"Height"] > 1.0) {
							VIVIZ[galleryid][type+"Height"] = VIVIZ[type+"Height"];
						} else {
							VIVIZ[galleryid][type+"Height"] = el.naturalHeight*VIVIZ[type+"Height"];
						}
					}

					// Compute un-specified width or height.
					if (VIVIZ[galleryid][type+"Width"] && !VIVIZ[galleryid][type+"Height"]) {
						VIVIZ[galleryid][type+"Height"] = VIVIZ[galleryid][type+"Width"]/ar;
					}
					if (VIVIZ[galleryid][type+"Height"] && !VIVIZ[galleryid][type+"Width"]) {
						VIVIZ[galleryid][type+"Width"] = VIVIZ[galleryid][type+"Height"]*ar;
					}


					if (!VIVIZ[galleryid][type+"Height"]) {
						VIVIZ[galleryid][type+"Height"] = el.naturalHeight;
					}
					if (!VIVIZ[galleryid][type+"Width"]) {
						VIVIZ[galleryid][type+"Width"] = el.naturalWidth;
					}
					VIVIZ[galleryid][type+"NaturalHeight"] = el.naturalHeight;
					VIVIZ[galleryid][type+"NaturalWidth"] = el.naturalWidth;

					// Set height of thumbnail image.
					$(this).css("height",VIVIZ[galleryid]["thumbHeight"]);
					$(this).css("width",VIVIZ[galleryid]["thumbWidth"]);

					console.log('gallery.firstimage(): First thumbnail loaded with natural dimensions = '+this.naturalWidth+'x'+this.naturalHeight+ '.');
					console.log('gallery.firstimage(): First thumbnail set to have dimensions = '+VIVIZ[galleryid]["thumbWidth"]+'x'+VIVIZ[galleryid]["thumbHeight"]+ '.');

					settabledims();
					
					// Lazy Load images.
					$('#gallerythumbframe').attr('data-thumb-length', INFOjs.length);
					var maxLength = INFOjs.length;
					if (INFOjs.length > VIVIZ["lazyLoadMax"]) {
						maxLength = VIVIZ["lazyLoadMax"];
					}
					if (maxLength + f > INFOjs.length) {
						maxLength = INFOjs.length-f;
					}

					// Set attribute that indicates which thumbnail is active.
					$('#gallerythumbframe').attr('data-thumb-displayed', f);
					
					setscrollbinding();

					// Set next batch of thumbnails.
					var tic = new Date().getTime();
					var slowwarn = false;
					console.log("gallery.firstimage(): Setting thumbnails "+(f+1)+"-"+(f+maxLength-1));
					for (var j = f+1; j < f+maxLength; j++) {
						if ($(wrapper + " #"+(j+1)).length == 0) { // Was not already loaded by findfirstimage
							$('<img class="gallerythumbbrowse"/>')
								.appendTo($(wrapper + ' #gallerythumbframe'))
								.attr("id",j+1)
								.attr("src", INFOjs[j].ThumbFile)
								.bind('click',setthumbbindings)
								.attr("title",imgtitle(INFOjs[j]))
								.css("height",VIVIZ[galleryid]["thumbHeight"])
								.css("width",VIVIZ[galleryid]["thumbWidth"])
								.load(function () {
									if ((slowwarn == false) && (new Date().getTime() - tic > 3000)) {
										$('#connectionerror').html("Slow-loading gallery.  See <a href='http://viviz.org/#Performace'>performace tips</a> for improving performance.");
										slowwarn = true;	
										setTimeout(function () {$('#connectionerror').html('')},3000);
									}	
								});
						}
					}
			});     
		}

		function setscrollbinding() {

			console.log("gallery.setscrollbinding: Called.");

			$('#gallerythumbframe').scroll(function(e){
				console.log("gallery.setscrollbinding(): Scroll event.")
				var elem = $(this);
				//console.log(elem[0].scrollHeight - elem[0].scrollTop - elem[0].clientHeight)
				if (elem[0].scrollHeight - elem[0].scrollTop - elem[0].clientHeight <= 0) {
					loadmore();
				}
			});
		}
	}

	function settabledims(el) {

		console.log("gallery.settabledims(): Called.")
		console.log("gallery.settabledims(): Full img natural width = " + VIVIZ[galleryid]["fullNaturalWidth"]);
		console.log("gallery.settabledims(): Full img natural height = " + VIVIZ[galleryid]["fullNaturalHeight"]);
		console.log("gallery.settabledims(): Full img scaled width = " + VIVIZ[galleryid]["fullWidth"]);
		console.log("gallery.settabledims(): Full img scaled height = " + VIVIZ[galleryid]["fullHeight"]);

		if (el) {
			// Don't get border-width by querying DOM for first thumbnail, because it may not be in 
			// DOM already.  Instead, get it from function parameter.
			var bw = 2*parseFloat($(el).css('border-width').replace("px",''));
			if (isNaN(bw)) {
				bw = $(wrapper + ' #gallerythumbframe img:first').outerWidth() - VIVIZ[galleryid]["thumbWidth"];
			}
			if  (isNaN(bw)) {
				bw = 2;
			}
			var w = VIVIZ[galleryid]["thumbWidth"] + $.scrollbarWidth() + bw + 2;
			console.log("gallery.firstimage(): Setting #gallerythumbframe width to = "+w);
			$(wrapper + ' #gallerythumbframe').width(w);
		}

		// Set heights of thumbframe and fullframe. When first image is loaded, fullNaturalHeight is set.
		if (VIVIZ[galleryid]["fullHeight"] > 0) {
			
			// Aspect ratio;
			var ar = VIVIZ[galleryid]["fullWidth"]/VIVIZ[galleryid]["fullHeight"];
			console.log("gallery.settabledims(): Aspect ratio = "+ar);

			// Force outer frame to stay the same size after image is removed and before new image is inserted.
			//$(wrapper + " #fullframe").width($(wrapper + " #fullframe").width())
			
			// Set height of thumb strip to be full height of image.
			$(wrapper + ' #gallerythumbframe').height(VIVIZ[galleryid]["fullHeight"]);

			enclosure = $(wrapper).parents().filter('body')[0];
			enclosure = "body";
			console.log("gallery.settabledims(): Window height: "+ $(window).height());
			console.log("gallery.settabledims(): Client height: "+ document.documentElement.clientHeight);
			console.log("gallery.settabledims(): Document height: "+ $(document).height());
			console.log("gallery.settabledims(): Enclosing body height: " + $(enclosure).height());
			// Amount height needs to shrink so that no scrollbar appears.
			dh = $(enclosure).height() - $(window).height();
			console.log("gallery.settabledims(): dh = "+dh);
			//return;

			if (dh > 0) {
				console.log("gallery.settabledims(): Shrinking height of #fullframe img.")
				$(wrapper + ' #fullframe img').height(VIVIZ[galleryid]["fullHeight"]-dh)
				console.log("gallery.settabledims(): Shrinking height of #gallerythumbframe to "+(VIVIZ[galleryid]["fullHeight"]-dh));
				$(wrapper + ' #gallerythumbframe').height(VIVIZ[galleryid]["fullHeight"]-dh);
				VIVIZ[galleryid]['fullHeight'] = VIVIZ[galleryid]["fullHeight"]-dh;
				VIVIZ[galleryid]['fullWidth']  = $(wrapper + ' #gallerythumbframe img:first').width()	        	
			} else {
				console.log("gallery.settabledims(): Full image height known and dh <=0.  Setting #gallerythumbframe height to be height of full image " + VIVIZ[galleryid]["fullHeight"]);
				console.log("gallery.settabledims(): Setting #gallerythumbframe height to "+VIVIZ[galleryid]["fullHeight"])
				$(wrapper + " #gallerythumbframe").height(VIVIZ[galleryid]["fullHeight"]);
			}

			console.log("gallery.settabledims(): Window height: "+ $(window).height());
			console.log("gallery.settabledims(): Client height: "+ document.documentElement.clientHeight);
			console.log("gallery.settabledims(): Document height: "+ $(document).height());
			console.log("gallery.settabledims(): Enclosing body height: " + $(enclosure).height());

			console.log("gallery.settabledims(): Window width: "+ $(window).width());
			console.log("gallery.settabledims(): Document width: "+ $(document).width());
			console.log("gallery.settabledims(): Enclosing body width: " + $(enclosure).width());

			dw = $(document).width()-$(enclosure).width();
			console.log("gallery.settabledims(): dw = "+dw);
			//return

			if (dw > 0) {
				if (dh > 0) {
					newh = VIVIZ[galleryid]["fullNaturalHeight"]-dh-dw/ar;
				} else {
					newh = VIVIZ[galleryid]["fullNaturalHeight"]-dw/ar;
				}
				newh = newh - 1;
				console.log("gallery.settabledims(): Shrinking height of #fullframe img again because of overlap in width.  New height: "+newh)
				$(wrapper + ' #fullframe img').height(newh)
				console.log("gallery.settabledims(): Shrinking height of #gallerythumbframe again because of overlap in width.  New height: "+newh);
				$(wrapper + ' #gallerythumbframe').height(newh);
				VIVIZ[galleryid]['fullHeight'] = newh;
				VIVIZ[galleryid]['fullWidth']  = $(wrapper + ' #gallerythumbframe img:first').width();      		        	
			} 


			dh = $(enclosure).height() - $(window).height();
			if (dh < 0) {
				console.log("gallery.settabledims(): Setting top margin for " + wrapper);
				$(wrapper).css('margin-top',-dh/2);
			}
			
		} else {
			console.log("gallery.settabledims(): Full image height unknown but thumb height known.");
			var a = 4*VIVIZ[galleryid]["thumbHeight"];
			console.log("gallery.settabledims(): Setting thumb frame height to be 4*(first thumb outer height) = "+a);
			console.log("gallery.settabledims(): First thumbnail height = " + $('#gallerythumbframe img').eq(0).height());
			$(wrapper + ' #gallerythumbframe').height("" + a);
		}
	}
	
	function loadfull(jq) {

		console.log("gallery.loadfull(): Called.");

		var id = $(jq).attr('id');
		var lastvisible = parseInt($(wrapper).attr('lastvisible'));
		$(wrapper + " #fullframe img[id=" + lastvisible + "]").hide();
		
		if (id > INFOjs.length) {return;}
		
		if ($(wrapper + " #fullframe img[id="+id+"]").length == 1) {
			console.log('gallery.loadfull(): Found hidden full image in DOM.  Showing.');
			$(wrapper + " #fullframe img[id=" + id + "]").show();
			prepnext();
			setfilename();
			return;
		}

		// Show loading indicator
		$(wrapper + ' #workingfullframe').css('visibility','visible');

		// Place empty image element in DOM.
		$(wrapper + " #fullframe").prepend('<img id="'+id+'" class="full"/>');

		// Does not work.
		var title = $(jq).attr("title"); 
		$(wrapper + " #fullframe img[id="+id+"]").attr("title",title)
		
		$(wrapper + " #fullframe img[id="+id+"]")
				.unbind('load')
				.error(function () {
					$(wrapper + ' #workingfullframe').css('visibility','hidden');
					//$(wrapper + ' #error').html('Could not load <a href="'+$(this).attr('src')+'">'+$(this).attr('src')+'</a>')
					$(this).width(VIVIZ[galleryid]["fullWidth"]);
					$(this).height(VIVIZ[galleryid]["fullHeight"]);
				})
				.load(function(){

					if ($(jq).hasClass('firstimage')) {
						console.log('gallery.loadfull(): First full image loaded with dimensions '+this.naturalWidth+'x'+this.naturalHeight+'.  Setting table dimensions.');

						el = this;
						type = 'full';
						var ar = el.naturalWidth/el.naturalHeight;

						// Compute pixels if given fractions.
						if (VIVIZ[type+"Width"]) {
							if (VIVIZ[type+"Width"] > 1.0) {
								VIVIZ[galleryid][type+"Width"] = VIVIZ[type+"Width"];
							} else {
								VIVIZ[galleryid][type+"Width"] = el.naturalWidth*VIVIZ[type+"Width"];
							}
						}
						if (VIVIZ[type+"Height"]) {
							if (VIVIZ[type+"Height"] > 1.0) {
								VIVIZ[galleryid][type+"Height"] = VIVIZ[type+"Height"];
							} else {
								VIVIZ[galleryid][type+"Height"] = el.naturalHeight*VIVIZ[type+"Height"];
							}
						}

						// Compute un-specified width or height.
						if (VIVIZ[galleryid][type+"Width"] && !VIVIZ[galleryid][type+"Height"]) {
							VIVIZ[galleryid][type+"Height"] = VIVIZ[galleryid][type+"Width"]/ar;
						}
						if (VIVIZ[galleryid][type+"Height"] && !VIVIZ[galleryid][type+"Width"]) {
							VIVIZ[galleryid][type+"Width"] = VIVIZ[galleryid][type+"Height"]*ar;
						}

						if (!VIVIZ[galleryid][type+"Height"]) {
							VIVIZ[galleryid][type+"Height"] = el.naturalHeight;
						}
						if (!VIVIZ[galleryid][type+"Width"]) {
							VIVIZ[galleryid][type+"Width"] = el.naturalWidth;
						}

						VIVIZ[galleryid][type+"NaturalHeight"] = el.naturalHeight;
						VIVIZ[galleryid][type+"NaturalWidth"] = el.naturalWidth;

						// Set height of full image.
						$(this).css("height",VIVIZ[galleryid]["fullHeight"]);
						//$(this).css("width",VIVIZ[galleryid]["fullWidth"]);

						var enclosure = "body"
						console.log("gallery.settabledims(): Window height: "+ $(window).height());
						console.log("gallery.settabledims(): Document height: "+ $(document).height());
						console.log("gallery.settabledims(): Enclosing body height: " + $(enclosure).height());
						

						//setTimeout(function () {
							settabledims(this);
						//},100);

						//$(this).click();

						//Enlil code
						$("#ss_img_div img").attr('src',$(wrapper + " #fullframe img[id=1]").attr('src'))

					} 

					//$(this).click();

					console.log("Load event")
					// Hide loading indicator
					$(wrapper + ' #workingfullframe').css('visibility','hidden');
					
					//$(wrapper + " #fullframe img[id="+id+"]").unbind("click");
					//$(wrapper + " #fullframe img[id="+id+"]").click(function() {
					//	console.log("Full image with id = "+id+" clicked.");
					//	$(wrapper + " #next").click();
					//});

					prepnext();
					setfilename();

				})
				.attr('src', INFOjs[parseInt(id-1)]["FullFile"]);

		function setfilename() {
				$(wrapper + " #filename").html('');
				$(wrapper + " #filename").append("<a>");
				$(wrapper + " #filename a").
				attr('href',INFOjs[parseInt(id-1)]["FullFile"]).
				text(INFOjs[parseInt(id-1)]["FullFile"]);

		}

		function prepnext() {
			
			// If next frame not in DOM, place it.
			var idn = parseInt(id) + 1;
			//console.log(idn)
			
			if (idn > INFOjs.length) {return;}
			if ($(wrapper + " #fullframe img[id="+idn+"]").length == 0) {
				$(wrapper + " #fullframe").prepend('<img id="'+idn+'" class="full" style="display:none"/>');
				$(wrapper + " #fullframe img[id="+idn+"]")
					.error(function () {
						$(wrapper + ' #workingfullframe').css('visibility','hidden');
						//$(wrapper + ' #error').html('Could not load <a href="'+$(this).attr('src')+'">'+$(this).attr('src')+'</a>')
						$(this).height(VIVIZ[galleryid]["fullHeight"]);
						$(this).width(VIVIZ[galleryid]["fullWidth"]);
					})
					.css('height',VIVIZ[galleryid]['fullHeight'])
					.attr('src',INFOjs[idn-1]["FullFile"])
//					.unbind("click")
//					.click(function() {$(wrapper + " #next").click()});
			}
		}
	}

	function loadmore() {
		var length = parseInt($('#gallerythumbframe').attr('data-thumb-length'));
		var shown = parseInt($("#gallerythumbframe > img").last().attr("id"));
		if (shown < length) {
			var maxLength = length;
			if (length > (shown+VIVIZ["lazyLoadMax"]))
				maxLength = shown+VIVIZ["lazyLoadMax"];
			
			//$(wrapper).attr('totalvisible', maxLength);
			//elem.attr('data-thumb-displayed', maxLength);
			//console.log(shown)
			var tic = new Date().getTime();
			var slowwarn = false;
			for (j=shown; j < shown+maxLength; j++) {
				//console.log("j="+j)
				if (j > INFOjs.length-1) break;
				$('<img class="gallerythumbbrowse lazyload"/>')
					.appendTo($(wrapper + ' #gallerythumbframe'))
					.attr("id",j+1)
					.attr("src", INFOjs[j].ThumbFile)
					.bind('click',setthumbbindings)
					.attr("title",imgtitle(INFOjs[j]))
					//.css("height",thumbheight)
					.css("height",$("#gallerythumbframe > img").first().height())
					.css("width",$("#gallerythumbframe > img").first().width())
					//.error(function () {$(this).remove())
					.load(function () {
						//$(wrapper).attr('totalvisible', parseInt($(wrapper).attr('totalvisible'))+1);
						if ((slowwarn == false) && (new Date().getTime() - tic > 3000)) {
							$('#connectionerror').html("Slow-loading gallery.  See <a href='http://viviz.org/#Performace'>performace tips</a> for improving performance.");
							slowwarn = true;	
							setTimeout(function () {$('#connectionerror').html('')},5000);
						}

						// The following will sometimes hide spinner before thumbnails are rendered on screen, because load
						// is triggered when image has been downloaded and before it is rendered.  This is the reason
						// for the 2*Nthumb ms delay (a guess).
						////console.log('Thumb '+parseInt($(this).attr('id'))+' loaded.');
														
					});
			}
		}
	}
	
	function setthumbbindings() {

		// Actions to take when a thumbnail is clicked.
		
		console.log("gallery.setthumbbindings(): Called.")

		var nowvisible  = parseInt($(wrapper).attr('nowvisible'));
		if (isNaN(nowvisible)) {
			nowvisible = 1;
			$(wrapper).attr('nowvisible', '1');
		} else {
			nowvisible = $(this).attr('id');
			//console.log('Setting nowvisible to ' + nowvisible);
			$(wrapper).attr('nowvisible', nowvisible);
		}
		var lastvisible = parseInt($(wrapper).attr('lastvisible'));
		if (isNaN(lastvisible)) {
			lastvisible = 1;
			$(wrapper).attr('lastvisible', '1');
		}
		
		$(wrapper + " #gallerythumbframe #" + lastvisible).removeClass('active').addClass('inactive');

		$(wrapper + " #gallerythumbframe #" + nowvisible).removeClass('inactive').addClass('active');
		
		// TODO: Duplicate calls can be avoided by giving each stat string an id and then showing hidden
		// 		 stat string if it already exists in DOM.
		INFOjs = thumblist(wrapper); 

		var statstr = "Attributes for #" + (nowvisible) + "/" + (INFOjs.length) + " in subset: ";
		statstr = statstr + " | Image #" + (1+INFOjs[nowvisible-1].ImageNumber) + "/" + $(wrapper).attr('totalingallery') + " in gallery | ";
		
		for (var z = 1;z < GALLERYINFO['attributes']["Values"].length;z++) {
			statstr = statstr + GALLERYINFO['attributes']["Values"][z].Title + " = ";
			if (GALLERYINFO['attributes']["Values"][z].Format) {
				statstr = statstr + sprintf(GALLERYINFO['attributes']["Values"][z].Format,parseFloat(INFOjs[nowvisible-1][GALLERYINFO['attributes']["Values"][z].Value]));
			} else {
				statstr = statstr + INFOjs[nowvisible-1][GALLERYINFO['attributes']["Values"][z].Value];            		
			}
			if (GALLERYINFO['attributes']["Values"][z].Unit) {
				statstr = statstr + " [" + GALLERYINFO['attributes']["Values"][z].Unit + "] " +  " | ";
			} else {
				statstr = statstr + " | ";
			}
		}

		$(wrapper + ' #stats').html(statstr);

		// Load full image.
		loadfull(this); 
		
		$(wrapper).attr("lastvisible",nowvisible);

		// Scroll thumbnail list
		$(wrapper + " #gallerythumbframe").scrollTo(this, 0, {
		   duration: 80, offset: 0
		});
	}

	function imgtitle(obj) {
		//http://stackoverflow.com/questions/5612787/converting-javascript-object-to-string
		var str = '';
		var k = 0;
		for (var p in obj) {
			if (obj.hasOwnProperty(p)) {
				if (isNaN(parseInt(p)))
					str += p + ':' + obj[p] + '\n';
				}
				k = k+1;
			}
			return str;
	}
	
	function setcontrolbindings() {
		
		// Show/Hide thumb button
		$(wrapper + " #showhidethumb").unbind();
		$(wrapper + " #showhidethumb").toggle(function(){
				$(wrapper + " #gallerythumbframe").hide();
				//$(wrapper + " #gallerythumbframe").css('visibility','hidden');
				//$(wrapper + " #gallerythumbframe").css('width','0px');
				setcontrolbindings.marginleft = $("#fullframe").css('margin-left');
				$("#fullframe").css('margin-left','0');
				$(wrapper + ' #showhidethumb').text('+');
			}, function(){
				console.log("gallery.setcontrolbindings: Showing gallerythumbframe.");
				$(wrapper + " #gallerythumbframe").css('visibility','visible')
				$(wrapper + " #gallerythumbframe").show();
				console.log("gallery.setcontrolbindings: Setting margin-left to " + setcontrolbindings.marginleft);
				$("#fullframe").css('margin-left',setcontrolbindings.marginleft)
				$(wrapper + ' #showhidethumb').text('x');
		});

		if (!VIVIZ["showThumbstrip"]) {$("#showhidethumb").click();}
		
		// Time step buttons
		$(wrapper + " #next").unbind('click');
		$(wrapper + ' #next').click(function(){
			lastvisible = parseInt($(wrapper).attr('lastvisible'));
			if (lastvisible == parseInt($(wrapper).attr('totalvisible'))) {				
				nowvisible = parseInt($(wrapper + " #gallerythumbframe img.firstimage").attr('id'));
			} else {
				nowvisible = lastvisible + 1;        	
			}
			console.log("gallery.setcontrolbindings: Next button clicked.  Clicking on thumbnail "+nowvisible)
			$(wrapper + " #gallerythumbframe #" + nowvisible).click();

			//Enlil code
			$("#ss_img_div img").attr('src',$(wrapper + " #fullframe img[id="+nowvisible+"]").attr('src'));
			
			var length = parseInt($('#gallerythumbframe').attr('data-thumb-length'));
			var shown = parseInt($("#gallerythumbframe > img").last().attr("id"));
			var f = Math.ceil(nowvisible/VIVIZ["lazyLoadMax"]) - nowvisible/VIVIZ["lazyLoadMax"];
			if (f < 0.5) loadmore();
		});
		
		$(wrapper + " #previous").unbind('click');
		$(wrapper + ' #previous').click(function(){
			lastvisible = parseInt($(wrapper).attr('lastvisible'));
			if (lastvisible == 1) {
				nowvisible = parseInt($(wrapper).attr('totalvisible'));
			} else {
				nowvisible = lastvisible - 1;
			}
			$(wrapper + " #" + nowvisible).click();

			//Enlil code
			$("#ss_img_div img").attr('src',$(wrapper + " #fullframe img[id="+nowvisible+"]").attr('src'))
		});
		
		$(wrapper + " #last").unbind('click');
		$(wrapper + ' #last').click(function(){
			nowvisible = parseInt($(wrapper + " #gallerythumbframe > img").last().attr("id"));
			$(wrapper + " #" + nowvisible).click();
		});

		$(wrapper + " #first").unbind('click');    
		$(wrapper + ' #first').click(function(){
			nowvisible = parseInt($(wrapper + " #gallerythumbframe > img").first().attr("id"));
			$(wrapper + " #" + nowvisible).click();
		});  
	}
	
	function setdropdowns() {

		// Does not work anymore with lazy load.
		dropdown("order", GALLERYINFO['orders'], wrapper + " #dropdownswrapper");
		
		// TODO: Set this based on available space.
		$(wrapper + " #gallery").css('width','15em');
		$(wrapper + " #order").css('width','8em');

		$(wrapper + ' #dropdownswrapper #order').change(function(){
			setthumbs();
		});

		if (GALLERYINFO['attributes']["Values"].length > 0) {
			dropdown("sortby", GALLERYINFO['attributes'], wrapper + " #dropdownswrapper");
			$(wrapper + ' #dropdownswrapper #sortby').change(function(){
				setregexps();
				setthumbs();
			});
			setregexps();	
		} else {
			console.log("gallery.setdropdowns(): No sort attributes.  Not displaying drop-downs for attributes.")
		}
	
		$(wrapper + " #sortby").css('width','8em');
		$(wrapper + " #regexp").css('width','8em');


		return true;

		function setregexps() {
			var REGEXPS            = new Object();			
			var n                  = $(wrapper + " #dropdownswrapper #sortby option:selected").val();
			REGEXPS["Title"]       = "View only images with an attribute that matches the selected constraint."
			REGEXPS["Titleshort"]  = "-Constraints-"
			REGEXPS["Values"]      = new Array();
			////console.log(GALLERYINFO['attributes'])
			for (i = 0; i < GALLERYINFO['attributes']["Values"][n]["Filters"].length; i++) {
				REGEXPS["Values"][i]          = new Object();
				REGEXPS["Values"][i]["Title"] = GALLERYINFO['attributes']["Values"][n]["Filters"][i]["Title"];
				REGEXPS["Values"][i]["Value"] = GALLERYINFO['attributes']["Values"][n]["Filters"][i]["Value"];
			}

			if (GALLERYINFO['attributes']["Values"][n]["Filters"].length > 1) {
				dropdown("regexp",REGEXPS,wrapper + " #dropdownswrapper");
			} else {
				console.log("gallery.setdropdowns(): No regexp filters.  Not displaying drop-down.")
				//$("#thumb1 #dropdownswrapper #regexp").remove();				
			}

			$(wrapper + ' #dropdownswrapper #regexp').change(function(){
				$(wrapper + " #fullframe").empty();
				setthumbs();
			})
		}
	}
	
	function testconnection() {
		function tryconnection() {
			d = new Date();
			$("<img id='testconnection'>").
			load(function () {
				if (testconnection.connected === false)
					gallery(wrapper);

				//console.log('Connection OK.  Last state ' + testconnection.connected);
				testconnection.connected = true;
				$("#connectionerror").html("");
				//console.log('Connection OK.');
				$('#testconnection').empty();
			}).
			error(function(){
				//console.log('Connection bad.  Last state ' + testconnection.connected);
				testconnection.connected = false;
				$("#connectionerror").html("Check internet connection.")
				//console.log('Connection bad.');
			}).
			attr('src','http://viviz.org/gallery/css/transparent.gif?'+d.getTime()).
			appendTo('testconnection');
		}
		
		if (testconnection.connectioncheck)
			clearInterval(testconnection.connectioncheck);

		var connectioncheck = setInterval(function(){
			tryconnection();
		},2000);
	}

	function fittoenclosure() {

		enclosure = $(wrapper).parent().parent();//filter('body')[0];
		console.log("gallery.settabledims(): Window height: "+ $(window).height());
		console.log("gallery.settabledims(): Document height: "+ $(document).height());
		console.log("gallery.settabledims(): Enclosing element height: " + $(enclosure).height());
		console.log("gallery.settabledims(): Wrapper height: " + $(wrapper).height());

		console.log("gallery.settabledims(): Window width: "+ $(window).width());
		console.log("gallery.settabledims(): Document width: "+ $(document).width());
		console.log("gallery.settabledims(): Enclosing element width: " + $(enclosure).width());
		console.log("gallery.settabledims(): Wrapper width: " + $(wrapper).width());

		var h = $(window).height()-$(enclosure).height();
		console.log("gallery.settabledims(): Vertical space for images: "+h);

		$(wrapper).height($(window).height())
		$(wrapper).width($(window).width())

		hleft  = $(wrapper + " #gallerythumbframe").outerHeight();
		hright = $(wrapper + " #fullframe").outerHeight();
		$(wrapper + " #gallerythumbframe").height(h-hleft)
		$(wrapper + " #fullframe").height(h-hright)
		
		wavail = $(wrapper +" #gallerythumbframe").innerWidth() + $(wrapper +" #fullframe").innerWidth();
		vavail = $(wrapper +" #gallerythumbframe").innerHeight() + $(wrapper +" #fullframe").innerHeight();

		console.log("gallery.settabledims(): Horizontal space for images: "+wavail);
		console.log("gallery.settabledims(): Vertical space for images: "+vavail);
	}
	
}
